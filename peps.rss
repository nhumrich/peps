<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>Newest Python PEPs</title>
    <link>https://peps.python.org/peps.rss</link>
    <description>Newest Python Enhancement Proposals (PEPs): Information on new language features and some meta-information like release procedure and schedules.</description>
    <atom:link href="https://peps.python.org/peps.rss" rel="self"/>
    <docs>https://cyber.harvard.edu/rss/rss.html</docs>
    <language>en</language>
    <lastBuildDate>Mon, 12 Aug 2024 16:05:38 GMT</lastBuildDate>
    <item>
      <title>PEP 751: A file format to list Python dependencies for installation reproducibility</title>
      <link>https://peps.python.org/pep-0751/</link>
      <description>This PEP proposes a new file format for dependency specification to enable reproducible installation in a Python environment. The format is designed to be human-readable and machine-generated. Installers consuming the file should be able to evaluate each package in question in isolation, with no need for dependency resolution at install-time.</description>
      <author>Brett Cannon (brett@python.org)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0751/</guid>
      <pubDate>Wed, 24 Jul 2024 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 750: Tag Strings For Writing Domain-Specific Languages</title>
      <link>https://peps.python.org/pep-0750/</link>
      <description>This PEP introduces tag strings for custom, repeatable string processing. Tag strings are an extension to f-strings, with a custom function – the “tag” – in place of the f prefix. This function can then provide rich features such as safety checks, lazy evaluation, domain-specific languages (DSLs) for web templating, and more.</description>
      <author>Jim Baker (jim.baker@python.org), Guido van Rossum (guido@python.org), Paul Everitt (pauleveritt@me.com)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0750/</guid>
      <pubDate>Mon, 08 Jul 2024 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 2026: Calendar versioning for Python</title>
      <link>https://peps.python.org/pep-2026/</link>
      <description>This PEP proposes updating the versioning scheme for Python to include the calendar year.</description>
      <author>Hugo van Kemenade</author>
      <guid isPermaLink="true">https://peps.python.org/pep-2026/</guid>
      <pubDate>Tue, 11 Jun 2024 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 749: Implementing PEP 649</title>
      <link>https://peps.python.org/pep-0749/</link>
      <description>This PEP supplements PEP 649 by providing various tweaks and additions to its specification:</description>
      <author>Jelle Zijlstra (jelle.zijlstra@gmail.com)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0749/</guid>
      <pubDate>Tue, 28 May 2024 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 747: TypeExpr: Type Hint for a Type Expression</title>
      <link>https://peps.python.org/pep-0747/</link>
      <description>PEP 484 defines the notation type[C] where C is a class, to refer to a class object that is a subtype of C. It explicitly does not allow type[C] to refer to arbitrary type expression objects such as the runtime object str | None, even if C is an unbounded TypeVar. 1 In cases where that restriction is unwanted, this PEP proposes a new notation TypeExpr[T] where T is a type, to refer to a either a class object or some other type expression object that is a subtype of T, allowing any kind of type to be referenced.</description>
      <author>David Foster (david at dafoster.net)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0747/</guid>
      <pubDate>Mon, 27 May 2024 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 746: Type checking Annotated metadata</title>
      <link>https://peps.python.org/pep-0746/</link>
      <description>This PEP proposes a mechanism for type checking metadata that uses the typing.Annotated type. Metadata objects that implement the new __supports_type__ protocol will be type checked by static type checkers to ensure that the metadata is valid for the given type.</description>
      <author>Adrian Garcia Badaracco (adrian@adriangb.com)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0746/</guid>
      <pubDate>Mon, 20 May 2024 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 789: Preventing task-cancellation bugs by limiting yield in async generators</title>
      <link>https://peps.python.org/pep-0789/</link>
      <description>Structured concurrency is increasingly popular in Python.  Interfaces such as the asyncio.TaskGroup and asyncio.timeout context managers support compositional reasoning, and allow developers to clearly scope the lifetimes of concurrent tasks. However, using yield to suspend a frame inside such a context leads to situations where the wrong task is canceled, timeouts are ignored, and exceptions are mishandled. More fundamentally, suspending a frame inside a TaskGroup violates the structured concurrency design principle that child tasks are encapsulated within their parent frame.</description>
      <author>Zac Hatfield-Dodds (zac@zhd.dev), Nathaniel J. Smith (njs@pobox.com)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0789/</guid>
      <pubDate>Tue, 14 May 2024 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 745: Python 3.14 Release Schedule</title>
      <link>https://peps.python.org/pep-0745/</link>
      <description>This document describes the development and release schedule for Python 3.14.</description>
      <author>Hugo van Kemenade</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0745/</guid>
      <pubDate>Wed, 24 Apr 2024 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 744: JIT Compilation</title>
      <link>https://peps.python.org/pep-0744/</link>
      <description>Earlier this year, an experimental “just-in-time” compiler was merged into CPython’s main development branch. While recent CPython releases have included other substantial internal changes, this addition represents a particularly significant departure from the way CPython has traditionally executed Python code. As such, it deserves wider discussion.</description>
      <author>Brandt Bucher (brandt@python.org), Savannah Ostrowski (savannahostrowski@gmail.com)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0744/</guid>
      <pubDate>Thu, 11 Apr 2024 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 743: Add Py_COMPAT_API_VERSION to the Python C API</title>
      <link>https://peps.python.org/pep-0743/</link>
      <description>Add Py_COMPAT_API_VERSION C macro that hides some deprecated and soft-deprecated symbols, allowing users to opt out of using API with known issues that other API solves. The macro is versioned, allowing users to update (or not) on their own pace.</description>
      <author>Victor Stinner (vstinner@python.org), Petr Viktorin (encukou@gmail.com)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0743/</guid>
      <pubDate>Mon, 11 Mar 2024 00:00:00 GMT</pubDate>
    </item>
  </channel>
</rss>
